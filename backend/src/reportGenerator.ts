// backend/src/reportGenerator.ts
import PDFDocument from 'pdfkit';
import { createWriteStream } from 'fs';
import path from 'path';

interface ProductData {
  id: string;
  name: string;
  description: string;
  created_at: string;
  [key: string]: any;
}

const generateProductReport = (product: ProductData, questionsAndAnswers: any[], filePath: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const writeStream = createWriteStream(filePath);

    doc.pipe(writeStream);

    doc.fontSize(25).text('Product Transparency Report', { align: 'center' });
    doc.moveDown();

    doc.fontSize(18).text(`Product: ${product.name}`);
    doc.fontSize(12).text(`ID: ${product.id}`);
    doc.fontSize(12).text(`Date Submitted: ${new Date(product.created_at).toLocaleDateString()}`);
    doc.moveDown();
    doc.fontSize(12).text(`Description: ${product.description}`);
    doc.moveDown();

    doc.fontSize(16).text('Detailed Information:', { underline: true });
    doc.moveDown(0.5);

    if (questionsAndAnswers && questionsAndAnswers.length > 0) {
        questionsAndAnswers.forEach((item) => {
            if (item.questions && item.questions.text) {
                const questionText = item.questions.text;
                const answerValue = item.value;

                let formattedValue = String(answerValue);
                if (item.questions.type === 'boolean') {
                    formattedValue = answerValue === 'Yes' ? 'Yes' : 'No';
                } else if (answerValue === null || answerValue === undefined || answerValue === '') {
                    formattedValue = 'Not Provided';
                }

                doc.fontSize(11).text(`- ${questionText}: ${formattedValue}`);
            } else {
                console.warn(`Warning: Could not find question text for answer with value '${item.value}'.`);
            }
        });
    } else {
        doc.fontSize(11).text("No detailed follow-up questions were answered for this product.");
    }

    doc.moveDown();
    doc.fontSize(10).text('Report generated by Product Transparency Platform', { align: 'center' });

    doc.end();

    writeStream.on('finish', () => resolve());
    writeStream.on('error', reject);
  });
};

export default generateProductReport;
