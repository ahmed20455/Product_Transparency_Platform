// backend/src/reportGenerator.ts
import PDFDocument from 'pdfkit';
import { createWriteStream } from 'fs';
import path from 'path';

interface ProductData {
  id: string;
  name: string;
  description: string;
  created_at: string;
  [key: string]: any; // For dynamic question answers
}

// Function to format keys from camelCase/snake_case to readable text
const formatKey = (key: string): string => {
    if (key === 'id' || key === 'created_at') {
        return key.replace(/_/g, ' ').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    }
    // Assuming dynamic question IDs often start with q_
    if (key.startsWith('q_')) {
        return key.substring(2).replace(/_/g, ' ').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');
    }
    return key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1');
};

const generateProductReport = (product: ProductData, filePath: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument();
    const writeStream = createWriteStream(filePath);

    doc.pipe(writeStream);

    // Header
    doc.fontSize(25).text('Product Transparency Report', { align: 'center' });
    doc.moveDown();

    // Product Name and Description
    doc.fontSize(18).text(`Product: ${product.name}`);
    doc.fontSize(12).text(`ID: ${product.id}`);
    doc.fontSize(12).text(`Date Submitted: ${new Date(product.created_at).toLocaleDateString()}`);
    doc.moveDown();
    doc.fontSize(12).text(`Description: ${product.description}`);
    doc.moveDown();

    doc.fontSize(16).text('Detailed Information:', { underline: true });
    doc.moveDown(0.5);

    // Dynamic and other details
    for (const key in product) {
      // Skip already printed core fields
      if (['id', 'name', 'description', 'created_at'].includes(key)) {
        continue;
      }

      let value = product[key];
      if (typeof value === 'boolean') {
        value = value ? 'Yes' : 'No';
      } else if (value === null || value === undefined || value === '') {
        value = 'Not Provided';
      } else {
        value = String(value); // Ensure it's a string
      }

      doc.fontSize(11).text(`- ${formatKey(key)}: ${value}`);
    }

    doc.moveDown();
    doc.fontSize(10).text('Report generated by Product Transparency Platform', { align: 'center' });

    doc.end();

    writeStream.on('finish', () => resolve());
    writeStream.on('error', reject);
  });
};

export default generateProductReport;