// backend/src/reportGenerator.ts
import PDFDocument from 'pdfkit';
import { createWriteStream } from 'fs';
import path from 'path';

interface ProductData {
  id: string;
  name: string;
  description: string;
  created_at: string;
  [key: string]: any;
}

const generateProductReport = (product: ProductData, questionsAndAnswers: any[], filePath: string): Promise<void> => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({
        size: 'A4',
        margins: { top: 50, bottom: 50, left: 50, right: 50 }
    });
    const writeStream = createWriteStream(filePath);

    doc.pipe(writeStream);

    // --- Header Section ---
    doc.fontSize(28).font('Helvetica-Bold').fillColor('#333').text('Product Transparency Report', { align: 'center' });
    doc.moveDown(0.5);

    doc.fontSize(10).font('Helvetica').fillColor('#666').text('Generated by Product Transparency Platform', { align: 'center' });
    doc.moveDown(1.5);

    // --- Product Summary Section ---
    doc.fontSize(18).font('Helvetica-Bold').fillColor('#007bff').text('Product Summary');
    doc.strokeColor('#007bff').lineWidth(2).moveTo(50, doc.y).lineTo(560, doc.y).stroke();
    doc.moveDown(1);

    doc.fontSize(12).font('Helvetica-Bold').fillColor('#333').text('Product Name: ');
    doc.fontSize(12).font('Helvetica').text(product.name, { continued: true }).text('');
    doc.moveDown(0.5);

    doc.fontSize(12).font('Helvetica-Bold').text('Description: ');
    doc.fontSize(12).font('Helvetica').text(product.description);
    doc.moveDown(0.5);

    doc.fontSize(12).font('Helvetica-Bold').text('Submitted Date: ');
    doc.fontSize(12).font('Helvetica').text(new Date(product.created_at).toLocaleDateString());
    doc.moveDown(1.5);

    // --- Detailed Information Section ---
    doc.fontSize(18).font('Helvetica-Bold').fillColor('#007bff').text('Detailed Information');
    doc.strokeColor('#007bff').lineWidth(2).moveTo(50, doc.y).lineTo(560, doc.y).stroke();
    doc.moveDown(1);

    if (questionsAndAnswers && questionsAndAnswers.length > 0) {
        questionsAndAnswers.forEach((item, index) => {
            if (item.questions && item.questions.text) {
                const questionText = item.questions.text;
                const answerValue = item.value;

                let formattedValue = String(answerValue);
                if (item.questions.type === 'boolean') {
                    formattedValue = answerValue === 'Yes' ? 'Yes' : 'No';
                } else if (answerValue === null || answerValue === undefined || answerValue === '') {
                    formattedValue = 'Not Provided';
                }

                doc.fontSize(12).font('Helvetica-Bold').fillColor('#333').text(`${index + 1}. ${questionText}`, {
                    align: 'left',
                    width: 500
                });
                doc.moveDown(0.2);
                doc.fontSize(11).font('Helvetica').fillColor('#555').text(`Answer: ${formattedValue}`);
                doc.moveDown(1);
            }
        });
    } else {
        doc.fontSize(11).font('Helvetica-Oblique').fillColor('#666').text("No detailed follow-up questions were answered for this product.");
        doc.moveDown(1);
    }

    // --- Footer Section ---
    const footerY = doc.page.height - 50;
    doc.moveTo(50, footerY).lineTo(560, footerY).strokeColor('#ccc').lineWidth(1).stroke();
    doc.fontSize(10).fillColor('#999').text('Â© Product Transparency Platform', 50, footerY + 10);

    // PDFKit does not provide pageNumber, so we track it manually
    let currentPage = 1;
    doc.on('pageAdded', () => {
      currentPage++;
    });
    doc.fontSize(10).text(`Page ${currentPage} of ${doc.bufferedPageRange().count}`, 500, footerY + 10, { align: 'right' });

    doc.end();

    writeStream.on('finish', () => resolve());
    writeStream.on('error', reject);
  });
};

export default generateProductReport;
